{"ast":null,"code":"import { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCESS } from '../constants/userConstants';\nimport axios from 'axios';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/snehalghule/Desktop/Final Project/cake-frontend/src/actions/userActions.js"],"names":["USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCESS","axios","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put"],"mappings":"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","sourcesContent":["import {\n  USER_DETAILS_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCESS,\n  USER_LOGOUT,\n  USER_REGISTER_FAIL,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCESS,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCESS,\n} from '../constants/userConstants'\nimport axios from 'axios'\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    })\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n      },\n    }\n    const { data } = await axios.post(\n      '/api/users/login',\n      { email, password },\n      config\n    )\n\n    dispatch({\n      type: USER_LOGIN_SUCESS,\n      payload: data,\n    })\n\n    localStorage.setItem('userInfo', JSON.stringify(data))\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem('userInfo')\n  dispatch({\n    type: USER_LOGOUT,\n  })\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n    })\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n      },\n    }\n    const { data } = await axios.post(\n      '/api/users',\n      { name, email, password },\n      config\n    )\n\n    dispatch({\n      type: USER_REGISTER_SUCESS,\n      payload: data,\n    })\n    dispatch({\n      type: USER_LOGIN_SUCESS,\n      payload: data,\n    })\n\n    localStorage.setItem('userInfo', JSON.stringify(data))\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n    const { data } = await axios.get(`/api/users/${id}`, config)\n\n    dispatch({\n      type: USER_DETAILS_SUCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n    const { data } = await axios.put(`/api/users/profile`, user, config)\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCESS,\n      payload: data,\n    })\n\n    dispatch({\n      type: USER_LOGIN_SUCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}